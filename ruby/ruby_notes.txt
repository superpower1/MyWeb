Ruby

哈希类Hash(键值对)
一般使用symbol来作为key
1. 创建：h = {"key"=>"value"} 或 h = Hash.new
2. 获取：h["key"]
3. 转换成数组：a = h.to_a 将会转换成 [["key1","value1"],["key2","value2"]]
4. 数组转换成哈希：a = [[1,2],[3,4]]
                  h = a.to_h 将会转化成 {1=>2, 3=>4}
5. 删除
h.delete("key")
6. 取出
h.assoc("key")取出key和value
h.keys 取出所有key
h.values 取出所有value
7. 判断
h.has_value?("value")
h.has_key?("key")
8. 合并
h.merge(h2)
9.遍历
h.each{|key, value| p [key, value]}
h.each_key{|key| p key}
h.each_value{|value| p value}



文件类File
1. 重命名：File.rename("old_name", "new_name")
2. 复制文件：require "FileUtils"
            FileUtils.cp("file_name", "another_name")
3. 删除文件：File.delete("file_name")

目录类Dir
1. 打开目录：Dir.open("dir_name")
2. 输出目录文件列表：while file_name = dir.read
                      p file_name
                    end
3. 创建文件夹：Dir.mkdir("dir_name")
4. 删除文件夹：Dir.delete("dir_name") 只能删除空文件夹

时间类Time
1. 创建时间实例：Time.new
2. 获取当前时间：t = Time.now (t.year, t.month, t.day... 分别获取年月日)
3. 格式化时间：Time.new.strftime("%Y/%m/%d %H:%M:%S")

日期类Date
引入：require("date")
1. 获取日期：Date.today (Date.tody+3 3天之后的日期，与Time的加减不同的是Time是以秒为单位)

迭代器
1. 数值类的迭代
    5.times{ |n|
      p n
    }
    依次打印0,1,2,3,4
2. 数组类
    a = [1,2,3,4]
    a.each{ |n|
      p n
    }
    依次打印1,2,3,4
3. 哈希类
    h = {"a"=>"b", "c"=>"d"}
    h.each { |key, value|
      p "#{key}:#{value}"
    }
    依次打印"a:b","c:d"
4. 排序
    a = [1,2,3,4]
    a.sort{ |a,b|
      b<=>a
    }
    返回[4,3,2,1], 不改变原数组

字符串常用方法
1. 反转字符串
"something".reverse

2. 是否包含
"something".include?('o')

3. 序号
"something".index('o')

4. 改变字符串
"something".sub('some', 'any') 将something改为anything
"something".sub!('some', 'any') 会改变原本的字符串

5. 长度
"something".size

数组常用方法
1. 定义
a = []
a = Array.new，可以定义长度以及默认值，Array.new(3, 0)
注意：如果使用Array.new(3, 'someting')来定义字符串数组的话，每个数组元素都是reference
要解决这个问题应使用Array.new(3) {'something'}
a = %w(foo bar wut wat)

2. 操作
a[-1]从后往前取，也就是最后一个元素
a[1..2]取a[1]和a[2]组成新数组返回
a.fetch(4)取值，a.fetch(4, 'nothing')如果取不到返回nothing
a.delete_at(0)删除
a.uniq可以删除重复值，a.uniq!可以改变原数组
a.shuffle打乱数组元素顺序随机排序
a.flatten将高维数组变成一维数组

3. 遍历数组
a.each{|e| p e}打印数组
a.reverse_each{|e| p e}反向打印数组
a.each_with_index{|e, i| p i}可以打印序号
a.sort 从小到大排序
a.select{|e| e>0}取数组大于0的元素
a.compact将数组中的nil去掉
a.any?{|e| e<0}判断数组中是否有小于0的元素
a << nil 将nilpush进数组

Set常用方法(要先使用require 'set'引入)
1. 创建
s = Set.new [1,2]
2. 添加
s.add('foo')
3. 集合运算
a & b 并集
a | b 交集
c <= a a是否属于c（即a是否是c的子集）

Range常用方法
1. 创建
r = 1..2
2. 操作
r.include?(2)

Ruby中的alias
alias :new_name :old_name

Ruby中的self
str= 'hello world'
def str.foo
  p self
end
将会打印'hello world'

Ruby中的operator method
重写运算符方法
arr = [1,2,3]
def arr.+(num)
  self.dup << num
end
arr+4将会返回新的数组[1,2,3,4]

Ruby中没有overload，所以Ruby中的方法可以支持默认参数和任意数量的参数
splat operator *
foo(a, *b, c=3) c默认等于3，b可以传入任意个参数，程序会将其转变成一个数组

Ruby中的方法可以传入hash
def foo(h)
  h.each do |key, value|
    p key
  end
end
foo(a:3, b:4)将会打印出:a和:b

Block
如果只有一行写{}，如果是多行使用do...end，{}优先级高
1. 使用yield
def foo
  a=2
  yield a
end
foo { |a| puts a }
2. 使用&
def foo(&block)
  a=2
  block.call(a)
end
foo{ |a| puts a }
3. Block中的return是指从使用当前block的方法中跳出

Proc类
1. proc对象
  创建proc：p = Proc.new {|x,y| puts x,y}
  arr = %w(a b c)
  arr.map(&:capitalize) 将会打印[A,B,C]
  capitalize方法会自动转为proc，然后用&将proc转变成block
  相当于arr.map{ |a| a.capitalize}
2. lambda对象
  l = lambda {|x,y| puts x,y}
3. lambda与proc的区别
  1） p = Proc.new {|x,y| puts x,y}可以传入任意个参数
      p.call(1)会将y输出nil，p.call(1,2,3)会忽略掉3
      l = lambda {|x,y| puts x,y}只能传入两个参数
      l.call(1)和l.call(1,2,3)都会报错
  2） p = Proc.new {|x| return if x>0}
      p.call(1)会报错
      l = lambda {|x| return if x>0}
      l.call(1)不会报错
